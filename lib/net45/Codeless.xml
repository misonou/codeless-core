<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Codeless</name>
    </assembly>
    <members>
        <member name="T:Codeless.DateTimeHelper">
            <summary>
            Provides conversions between ECMAScript and Unix timestamps to and from <see cref="T:System.DateTime"/> objects.
            </summary>
        </member>
        <member name="M:Codeless.DateTimeHelper.FromJavaScriptTimestamp(System.Int64,System.DateTimeKind)">
            <summary>
            Converts a JavaScript timestamp to a <see cref="T:System.DateTime"/> object.
            </summary>
            <param name="timestamp">A JavaScript timestamp.</param>
            <param name="kind">Kind of <see cref="T:System.DateTime"/> object.</param>
            <returns>A <see cref="T:System.DateTime"/> object representing the same moment of that of the supplied timestamp.</returns>
        </member>
        <member name="M:Codeless.DateTimeHelper.FromUnixTimestamp(System.Int64,System.DateTimeKind)">
            <summary>
            Converts a Unix timestamp to a <see cref="T:System.DateTime"/> object.
            </summary>
            <param name="timestamp">A Unix timestamp.</param>
            <param name="kind">Kind of <see cref="T:System.DateTime"/> object.</param>
            <returns>A <see cref="T:System.DateTime"/> object representing the same moment of that of the supplied timestamp.</returns>
        </member>
        <member name="M:Codeless.DateTimeHelper.ToJavaScriptTimestamp(System.DateTime)">
            <summary>
            Converts a <see cref="T:System.DateTime"/> object to a JavaScript timestamp.
            </summary>
            <param name="d">A <see cref="T:System.DateTime"/> object.</param>
            <returns>A JavaScript timestamp representing the same moment of that of the <see cref="T:System.DateTime"/> object.</returns>
        </member>
        <member name="M:Codeless.DateTimeHelper.ToUnixTimestamp(System.DateTime)">
            <summary>
            Converts a <see cref="T:System.DateTime"/> object to a Unix timestamp.
            </summary>
            <param name="d">A <see cref="T:System.DateTime"/> object.</param>
            <returns>A Unix timestamp representing the same moment of that of the <see cref="T:System.DateTime"/> object.</returns>
        </member>
        <member name="T:Codeless.DictionaryHelper">
            <summary>
            Provides extension methods to objects implementing the <see cref="T:System.Collections.IDictionary"/> interface.
            </summary>
        </member>
        <member name="M:Codeless.DictionaryHelper.EnsureKeyValue``1(System.Collections.IDictionary,System.Object)">
            <summary>
            Checks if an dictionary contains the specified key, otherwise an object of type <typeparamref name="TValue"/> instantiated by 
            its parameterless constructor is added to the dictionary with the specified key.
            </summary>
            <typeparam name="TValue">Type of the object to be added.</typeparam>
            <param name="dictionary">An dictionary.</param>
            <param name="key">A key that is accepted by the target dictionary.</param>
            <returns>An existing value in the dictionary if the key is found and its associated value is of type <typeparamref name="TValue"/>; othewise a new instance of type <typeparamref name="TValue"/>.</returns>
        </member>
        <member name="M:Codeless.DictionaryHelper.EnsureKeyValue``1(System.Collections.IDictionary,System.Object,System.Func{``0})">
            <summary>
            Checks if an dictionary contains the specified key, otherwise an object of type <typeparamref name="TValue"/> returned by 
            a value factory delegate is added to the dictionary with the specified key.
            </summary>
            <typeparam name="TValue">Type of the object to be added.</typeparam>
            <param name="dictionary">An dictionary.</param>
            <param name="key">A key that is accepted by the target dictionary.</param>
            <param name="valueFactory">A value factory delegate that will be called if a new value is needed to be added to the dictionary.</param>
            <returns>An existing value in the dictionary if the key is found and its associated value is of type <typeparamref name="TValue"/>; othewise a new instance of type <typeparamref name="TValue"/> returned by the value factory.</returns>
        </member>
        <member name="M:Codeless.DictionaryHelper.EnsureKeyValue``2(System.Collections.Generic.IDictionary{``0,``1},``0)">
            <summary>
            Checks if a typed dictionary contains the specified key, otherwise an object of type <typeparamref name="TValue"/> instantiated by 
            its parameterless constructor is added to the dictionary with the specified key.
            </summary>
            <typeparam name="TKey">Type of keys accepted by the dictionary.</typeparam>
            <typeparam name="TValue">Type of the objects to be added.</typeparam>
            <param name="dictionary">An dictionary.</param>
            <param name="key">A key that is accepted by the target dictionary.</param>
            <returns>An existing value in the dictionary if the key is found and its associated value is of type <typeparamref name="TValue"/>; othewise a new instance of type <typeparamref name="TValue"/>.</returns>
        </member>
        <member name="M:Codeless.DictionaryHelper.EnsureKeyValue``2(System.Collections.Generic.IDictionary{``0,``1},``0,System.Func{``1})">
            <summary>
            Checks if a typed dictionary contains the specified key, otherwise an object of type <typeparamref name="TValue"/> returned by 
            a value factory delegate is added to the dictionary with the specified key.
            </summary>
            <typeparam name="TKey">Type of keys accepted by the dictionary.</typeparam>
            <typeparam name="TValue">Type of the objects to be added.</typeparam>
            <param name="dictionary">An dictionary.</param>
            <param name="key">A key that is accepted by the target dictionary.</param>
            <param name="valueFactory">A value factory delegate that will be called if a new value is needed to be added to the dictionary.</param>
            <returns>An existing value in the dictionary if the key is found and its associated value is of type <typeparamref name="TValue"/>; othewise a new instance of type <typeparamref name="TValue"/> returned by the value factory.</returns>
        </member>
        <member name="M:Codeless.DictionaryHelper.EnsureKeyValue``2(System.Collections.Generic.IDictionary{``0,``1},``0,System.Func{``0,``1})">
            <summary>
            Checks if a typed dictionary contains the specified key, otherwise an object of type <typeparamref name="TValue"/> returned by 
            a value factory delegate is added to the dictionary with the specified key.
            </summary>
            <typeparam name="TKey">Type of keys accepted by the dictionary.</typeparam>
            <typeparam name="TValue">Type of the objects to be added.</typeparam>
            <param name="dictionary">An dictionary.</param>
            <param name="key">A key that is accepted by the target dictionary.</param>
            <param name="valueFactory">A value factory delegate that will be called if a new value is needed to be added to the dictionary.</param>
            <returns>An existing value in the dictionary if the key is found and its associated value is of type <typeparamref name="TValue"/>; othewise a new instance of type <typeparamref name="TValue"/> returned by the value factory.</returns>
        </member>
        <member name="M:Codeless.DictionaryHelper.EnsureKeyValue``2(System.Collections.Concurrent.ConcurrentDictionary{``0,``1},``0)">
            <summary>
            Checks if a thread-safe dictionary contains the specified key, otherwise an object of type <typeparamref name="TValue"/> instantiated by 
            its parameterless constructor is added to the dictionary with the specified key.
            </summary>
            <typeparam name="TKey">Type of keys accepted by the dictionary.</typeparam>
            <typeparam name="TValue">Type of the objects to be added.</typeparam>
            <param name="dictionary">An dictionary.</param>
            <param name="key">A key that is accepted by the target dictionary.</param>
            <returns>An existing value in the dictionary if the key is found and its associated value is of type <typeparamref name="TValue"/>; othewise a new instance of type <typeparamref name="TValue"/>.</returns>
        </member>
        <member name="M:Codeless.DictionaryHelper.EnsureKeyValue``2(System.Collections.Concurrent.ConcurrentDictionary{``0,``1},``0,System.Func{``1})">
            <summary>
            Checks if a thread-safe dictionary contains the specified key, otherwise an object of type <typeparamref name="TValue"/> returned by 
            a value factory delegate is added to the dictionary with the specified key.
            </summary>
            <typeparam name="TKey">Type of keys accepted by the dictionary.</typeparam>
            <typeparam name="TValue">Type of the objects to be added.</typeparam>
            <param name="dictionary">An dictionary.</param>
            <param name="key">A key that is accepted by the target dictionary.</param>
            <param name="valueFactory">A value factory delegate that will be called if a new value is needed to be added to the dictionary.</param>
            <returns>An existing value in the dictionary if the key is found and its associated value is of type <typeparamref name="TValue"/>; othewise a new instance of type <typeparamref name="TValue"/> returned by the value factory.</returns>
        </member>
        <member name="M:Codeless.DictionaryHelper.EnsureKeyValue``2(System.Collections.Concurrent.ConcurrentDictionary{``0,``1},``0,System.Func{``0,``1})">
            <summary>
            Checks if a thread-safe dictionary contains the specified key, otherwise an object of type <typeparamref name="TValue"/> returned by 
            a value factory delegate is added to the dictionary with the specified key.
            </summary>
            <typeparam name="TKey">Type of keys accepted by the dictionary.</typeparam>
            <typeparam name="TValue">Type of the objects to be added.</typeparam>
            <param name="dictionary">An dictionary.</param>
            <param name="key">A key that is accepted by the target dictionary.</param>
            <param name="valueFactory">A value factory delegate that will be called if a new value is needed to be added to the dictionary.</param>
            <returns>An existing value in the dictionary if the key is found and its associated value is of type <typeparamref name="TValue"/>; othewise a new instance of type <typeparamref name="TValue"/> returned by the value factory.</returns>
        </member>
        <member name="M:Codeless.DictionaryHelper.AsReadOnly``2(System.Collections.Generic.IDictionary{``0,``1})">
            <summary>
            Creates a read-only dictionary from the supplied dictionary.
            </summary>
            <typeparam name="TKey">Type of keys of the source dictionary.</typeparam>
            <typeparam name="TValue">Type of values of the source dictionary.</typeparam>
            <param name="dictionary">Source dictionary.</param>
            <returns></returns>
        </member>
        <member name="T:Codeless.EnumerableHelper">
            <summary>
            Provides methods for enumeration.
            </summary>
        </member>
        <member name="M:Codeless.EnumerableHelper.Descendants``1(``0,System.Func{``0,System.Collections.Generic.IEnumerable{``0}})">
            <summary>
            Selects all descendant objects in a tree-like data structure.
            </summary>
            <typeparam name="T">Type of objects to select.</typeparam>
            <param name="source">An object representing a node in a tree-like data structure.</param>
            <param name="selector">An delegate to select the child nodes of a given node.</param>
            <returns>An enumerable which enumerates all descendant nodes of the specified node.</returns>
        </member>
        <member name="M:Codeless.EnumerableHelper.Ancestors``1(``0,System.Func{``0,``0})">
            <summary>
            Selects all ancestor objects in a tree-like data structure.
            </summary>
            <typeparam name="T">Type of objects to select.</typeparam>
            <param name="source">An object representing a node in a tree-like data structure.</param>
            <param name="selector">An delegate to select the arent node of a given node.</param>
            <returns>An enumerable which enumerates all ancestor nodes of the specified node.</returns>
        </member>
        <member name="T:Codeless.IniConfigurationFormat">
            <summary>
            Specifies behaviors when parsing from or converting to an INI-formatted string.
            </summary>
        </member>
        <member name="F:Codeless.IniConfigurationFormat.ForceQuote">
            <summary>
            Forces double-quoting of values when converting to an INI-formatted string.
            </summary>
        </member>
        <member name="F:Codeless.IniConfigurationFormat.SortKey">
            <summary>
            Sorts entries alphabetically by their keys when converting to an INI-formatted string.
            </summary>
        </member>
        <member name="F:Codeless.IniConfigurationFormat.PreserveComment">
            <summary>
            Writes comments when converting to an INI-formatted string.
            </summary>
        </member>
        <member name="T:Codeless.IniConfigurationSection">
            <summary>
            Represents a section in an INI-formatted string.
            </summary>
        </member>
        <member name="P:Codeless.IniConfigurationSection.Name">
            <summary>
            Gets the name of the section represented by the instance.
            </summary>
        </member>
        <member name="M:Codeless.IniConfigurationSection.GetComment">
            <summary>
            Gets the comment of the section represented by the instance.
            </summary>
            <returns>The comment of the section.</returns>
        </member>
        <member name="M:Codeless.IniConfigurationSection.GetComment(System.String)">
            <summary>
            Gets the comment associated with the specified key.
            </summary>
            <param name="key">The key of comment to get</param>
            <returns></returns>
        </member>
        <member name="M:Codeless.IniConfigurationSection.SetComment(System.String)">
            <summary>
            Sets the comment of the section represented by the instance.
            </summary>
            <param name="value">The comment of the section to set.</param>
        </member>
        <member name="M:Codeless.IniConfigurationSection.SetComment(System.String,System.String)">
            <summary>
            Sets the comment associated with the specified key.
            </summary>
            <param name="key"></param>
            <param name="value"></param>
        </member>
        <member name="M:Codeless.IniConfigurationSection.RemoveComment(System.String)">
            <summary>
            Removes the comment associated with the specified key.
            </summary>
            <param name="key"></param>
        </member>
        <member name="T:Codeless.IniConfiguration">
            <summary>
            Represents a collection of keys and values that is parsed from or to be converted to an INI-formatted string.
            </summary>
        </member>
        <member name="M:Codeless.IniConfiguration.#ctor">
            <summary>
            Instantiates a new instance of the <see cref="T:Codeless.IniConfiguration"/> class that is empty.
            </summary>
        </member>
        <member name="M:Codeless.IniConfiguration.#ctor(System.Collections.Specialized.NameValueCollection)">
            <summary>
            Instantiates a new instance of the <see cref="T:Codeless.IniConfiguration"/> class with the specified keys and values.
            </summary>
            <param name="collection"></param>
        </member>
        <member name="M:Codeless.IniConfiguration.#ctor(Codeless.IniConfiguration)">
            <summary>
            Instantiates a new instance of the <see cref="T:Codeless.IniConfiguration"/> class and copy all entries from the specified instance.
            </summary>
            <param name="other"></param>
        </member>
        <member name="P:Codeless.IniConfiguration.Sections">
            <summary>
            Gets a collection containing the sections.
            </summary>
        </member>
        <member name="P:Codeless.IniConfiguration.DefaultSection">
            <summary>
            Gets the default section where entries where rendered before any section identifiers in an INI-formatted string.
            </summary>
        </member>
        <member name="M:Codeless.IniConfiguration.AddSection(System.String)">
            <summary>
            Adds a new section of the specified name to the collection.
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:Codeless.IniConfiguration.GetSection(System.String)">
            <summary>
            Gets the section of the specified name.
            </summary>
            <param name="name">The name of the section to get.</param>
            <returns>The section of the specified name.</returns>
        </member>
        <member name="M:Codeless.IniConfiguration.RemoveSection(System.String)">
            <summary>
            Removes the section of the specified name from the collection.
            </summary>
            <param name="name">The name of the section to remove.</param>
        </member>
        <member name="M:Codeless.IniConfiguration.Clear">
            <summary>
            Removes all entries and sections in the collection.
            </summary>
        </member>
        <member name="M:Codeless.IniConfiguration.Parse(System.String)">
            <summary>
            Parse an INI-formatted formatted string and creates a new instance of the <see cref="T:Codeless.IniConfiguration"/> class with the parsed keys and values.
            </summary>
            <param name="data">An INI-formatted formatted string.</param>
            <returns>A key-value collection that contains key-value pairs parsed from the specified string.</returns>
        </member>
        <member name="M:Codeless.IniConfiguration.ToString">
            <summary>
            Converts the collection to an INI-formatted formatted string with the default options.
            </summary>
            <returns>An INI-formatted formatted string that contains the keys and values in the collection.</returns>
        </member>
        <member name="M:Codeless.IniConfiguration.ToString(System.String)">
            <summary>
            Converts the collection to an INI-formatted formatted string with the specified options.
            </summary>
            <param name="format"></param>
            <returns></returns>
        </member>
        <member name="M:Codeless.IniConfiguration.ToString(System.String,System.IFormatProvider)">
            <summary>
            Converts the collection to an INI-formatted formatted string with the specified options.
            </summary>
            <param name="format"></param>
            <param name="formatProvider"></param>
            <returns></returns>
        </member>
        <member name="M:Codeless.IniConfiguration.ToString(Codeless.IniConfigurationFormat)">
            <summary>
            Converts the collection to an INI-formatted formatted string with the specified options.
            </summary>
            <param name="format"></param>
            <returns>An INI-formatted formatted string that contains the keys and values in the collection.</returns>
        </member>
        <member name="T:Codeless.IniConfigurationConverter">
            <summary>
            Provides a type converter to convert string to <see cref="T:Codeless.IniConfiguration"/> objects.
            </summary>
        </member>
        <member name="M:Codeless.IniConfigurationConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <summary>
            Overriden. <see cref="M:System.ComponentModel.TypeConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)"/>.
            </summary>
            <param name="context"></param>
            <param name="sourceType"></param>
            <returns></returns>
        </member>
        <member name="M:Codeless.IniConfigurationConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
            <summary>
            Overriden. <see cref="M:System.ComponentModel.TypeConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)"/>.
            </summary>
            <param name="context"></param>
            <param name="culture"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="T:Codeless.ReflectionHelper">
            <summary>
            Provides methods to simplify reflection operations.
            </summary>
        </member>
        <member name="M:Codeless.ReflectionHelper.GetLoadedTypes(System.Reflection.Assembly)">
            <summary>
            Gets the types defined in the specified assembly.
            Types that cannot be loaded are excluded in the result.
            </summary>
            <param name="assembly">An assembly object.</param>
            <returns>An array of loadable types defined in this assembly.</returns>
        </member>
        <member name="M:Codeless.ReflectionHelper.GetBaseDefinition(System.Reflection.PropertyInfo)">
            <summary>
            Gets a base definition of an overriden property. It is analogous to <see cref="M:System.Reflection.MethodInfo.GetBaseDefinition"/>.
            </summary>
            <param name="property">An object representing a property.</param>
            <returns>Base definition of the property; or the supplied property if there is no base definition.</returns>
        </member>
        <member name="M:Codeless.ReflectionHelper.GetParameterTypes(System.Reflection.MethodBase)">
            <summary>
            Gets the types of the parameters of the specified method or constructor.
            </summary>
            <param name="method">An object representing a method or constructor.</param>
            <returns>A collection containing the types of each parameter.</returns>
        </member>
        <member name="M:Codeless.ReflectionHelper.GetIndexParameterTypes(System.Reflection.PropertyInfo)">
            <summary>
            Gets the types of the index parameters of the specified indexer.
            </summary>
            <param name="property">An object representing an indexer.</param>
            <returns>A collection containing the types of each parameter.</returns>
        </member>
        <member name="M:Codeless.ReflectionHelper.CreateInstance``1">
            <summary>
            Creates an instance of the specified type <typeparamref name="T"/> using the default parameterless constructor.
            Any exception thrown from the constructor is rethrown directly instead of <see cref="T:System.Reflection.TargetInvocationException"/>.
            </summary>
            <typeparam name="T">The type of object to create.</typeparam>
            <returns>A reference to the newly created object.</returns>
        </member>
        <member name="M:Codeless.ReflectionHelper.CreateInstance``1(System.Object[])">
            <summary>
            Creates an instance of the specified type <typeparamref name="T"/> using the default parameterless constructor.
            Any exception thrown from the constructor is rethrown directly instead of <see cref="T:System.Reflection.TargetInvocationException"/>.
            </summary>
            <typeparam name="T">The type of object to create.</typeparam>
            <param name="parameters">A list of parameters to be passed to the constructor.</param>
            <returns>A reference to the newly created object.</returns>
        </member>
        <member name="M:Codeless.ReflectionHelper.CreateInstance(System.Type,System.Object[])">
            <summary>
            Creates an instance of the specified type using the inferred constructor from the specified parameters.
            If the specified class is a generic class definition, the generic type arguments are also inferred from the specified parameters.
            Any exception thrown from the constructor is rethrown directly instead of <see cref="T:System.Reflection.TargetInvocationException"/>.
            </summary>
            <param name="type">The type of object to create.</param>
            <param name="parameters">A list of parameters to be passed to the constructor.</param>
            <returns>A reference to the newly created object.</returns>
        </member>
        <member name="M:Codeless.ReflectionHelper.GetValue``1(System.Reflection.FieldInfo,System.Object)">
            <summary>
            Gets the value of a field supported by a given object.
            </summary>
            <typeparam name="T">The type of value.</typeparam>
            <param name="member">An object representing the data field of the value to get.</param>
            <param name="target">The object whose field value will be returned.</param>
            <returns>An object containing the value of the field reflected by this instance.</returns>
        </member>
        <member name="M:Codeless.ReflectionHelper.GetValue``1(System.Reflection.PropertyInfo,System.Object,System.Object[])">
            <summary>
            Gets the value of a property supported by a given object.
            If the specified property is declared on a generic class definition, the generic type arguments of the declaring type is inferred from the specified parameters.
            Any exception thrown from the property accessor method is rethrown directly instead of <see cref="T:System.Reflection.TargetInvocationException"/>.
            </summary>
            <typeparam name="T">The type of value.</typeparam>
            <param name="member">An object representing the data property of the value to get.</param>
            <param name="target">The object whose property value will be returned.</param>
            <param name="parameters">A list of parameters supplied to the data property if it accepts index parameters.</param>
            <returns>An object containing the value of the property reflected by this instance.</returns>
        </member>
        <member name="M:Codeless.ReflectionHelper.SetValue``1(System.Reflection.FieldInfo,System.Object,``0)">
            <summary>
            Sets the value of a field supported by a given object.
            </summary>
            <typeparam name="T">The type of value.</typeparam>
            <param name="member">An object representing the data field of the value to set.</param>
            <param name="target">The object whose field value will be set.</param>
            <param name="value">An object containing the value.</param>
        </member>
        <member name="M:Codeless.ReflectionHelper.SetValue``1(System.Reflection.PropertyInfo,System.Object,``0,System.Object[])">
            <summary>
            Sets the value of a property supported by a given object.
            If the specified property is declared on a generic class definition, the generic type arguments of the declaring type is inferred from the specified parameters.
            Any exception thrown from the property accessor method is rethrown directly instead of <see cref="T:System.Reflection.TargetInvocationException"/>.
            </summary>
            <typeparam name="T">The type of value.</typeparam>
            <param name="member">An object representing the data property of the value to set.</param>
            <param name="target">The object whose property value will be returned.</param>
            <param name="value">An object containing the value.</param>
            <param name="parameters">A list of parameters supplied to the data property if it accepts index parameters.</param>
        </member>
        <member name="M:Codeless.ReflectionHelper.Invoke``1(System.Reflection.MethodBase,System.Object,System.Object[])">
            <summary>
            Invokes the specified method or constructor, using the specified parameters.
            If the specified method is declared on a generic class definition, or is a generic method definition, 
            the generic type arguments of the declaring type is inferred from the specified parameters.
            Any exception thrown from the method is rethrown directly instead of <see cref="T:System.Reflection.TargetInvocationException"/>.
            </summary>
            <typeparam name="T">The return type of the specified method.</typeparam>
            <param name="member">An object representing the method or constructor to invoke.</param>
            <param name="target">The object whose method will be invoked.</param>
            <param name="parameters">A list of parameters supplied to the method or constructor.</param>
            <returns>The value returned by the method invocation.</returns>
        </member>
        <member name="M:Codeless.ReflectionHelper.RaiseEvent(System.Object,System.String,System.Object[])">
            <summary>
            Raises the specified event, using the specified parameters.
            Any exception thrown from the method is rethrown directly instead of <see cref="T:System.Reflection.TargetInvocationException"/>.
            </summary>
            <param name="target"></param>
            <param name="name"></param>
            <param name="parameters"></param>
        </member>
        <member name="M:Codeless.ReflectionHelper.InvokeMethod(System.Object,System.String,System.Object[])">
            <summary>
            Invokes the specified method, using the specified parameters.
            Any exception thrown from the method is rethrown directly instead of <see cref="T:System.Reflection.TargetInvocationException"/>.
            </summary>
            <param name="target">An object representing the method to invoke.</param>
            <param name="name">The object whose method will be invoked.</param>
            <param name="parameters">A list of parameters supplied to the method.</param>
            <returns>The value returned by the method invocation.</returns>
        </member>
        <member name="M:Codeless.ReflectionHelper.InvokeMethod``1(System.Object,System.String,System.Object[])">
            <summary>
            Invokes the specified method, using the specified parameters.
            Any exception thrown from the method is rethrown directly instead of <see cref="T:System.Reflection.TargetInvocationException"/>.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="target">An object representing the method to invoke.</param>
            <param name="name">The object whose method will be invoked.</param>
            <param name="parameters">A list of parameters supplied to the method.</param>
            <returns>The value returned by the method invocation.</returns>
        </member>
        <member name="T:Codeless.TypeHelper">
            <summary>
            Provides extension methods to <see cref="T:System.Type"/> objects.
            </summary>
        </member>
        <member name="M:Codeless.TypeHelper.GetDefaultValue(System.Type)">
            <summary>
            Gets a default value for a specified type. It is equivalent to <code>default(T)</code> if the type in known at compile time.
            </summary>
            <param name="type">Type which its default value is returned.</param>
            <exception cref="T:System.ArgumentException">Throws if the specified type is a generic type, or does not have a public parameterless constructor, or is not public.</exception>
            <returns>A default value for the specified type.</returns>
        </member>
        <member name="M:Codeless.TypeHelper.GetEnumeratedType(System.Type)">
            <summary>
            Gets the element type of an enumerable type that is not of the type <see cref="T:System.String"/>.
            </summary>
            <param name="type">An enumerable type.</param>
            <returns>The element type if the specified type implements the interface <see cref="T:System.Collections.IEnumerable"/> or <see cref="T:System.Collections.Generic.IEnumerable`1"/>; otherwise *null*.</returns>
        </member>
        <member name="M:Codeless.TypeHelper.GetField(System.Type,System.String,System.Boolean)">
            <summary>
            Gets the specified field.
            </summary>
            <param name="type">The type of field to search.</param>
            <param name="name">The string containing the name of the data field to get.</param>
            <param name="nonPublic">A boolean value specifying whether to return non-public field.</param>
            <returns>An object representing the field that matches the specified requirements, if found; otherwise, null.</returns>
        </member>
        <member name="M:Codeless.TypeHelper.GetProperty(System.Type,System.String,System.Boolean)">
            <summary>
            Gets the specified property.
            </summary>
            <param name="type">The type of property to search.</param>
            <param name="name">The string containing the name of the data property to get.</param>
            <param name="nonPublic">A boolean value specifying whether to return non-public property.</param>
            <returns>An object representing the property that matches the specified requirements, if found; otherwise, null.</returns>
        </member>
        <member name="M:Codeless.TypeHelper.GetMethod(System.Type,System.String,System.Boolean)">
            <summary>
            Gets the specified method.
            </summary>
            <param name="type">The type of method to search</param>
            <param name="name">The string containing the name of the method to get.</param>
            <param name="nonPublic">A boolean value specifying whether to return non-public method.</param>
            <returns>An object representing the method that matches the specified requirements, if found; otherwise, null</returns>
        </member>
        <member name="M:Codeless.TypeHelper.GetMethod(System.Type,System.String,System.Boolean,System.Type[])">
            <summary>
            Gets the specified method that has the specified types of parameters.
            </summary>
            <param name="type">The type of method to search</param>
            <param name="name">The string containing the name of the method to get.</param>
            <param name="nonPublic">A boolean value specifying whether to return non-public method.</param>
            <param name="parameterTypes">A collection containing the types of parameters.</param>
            <returns>An object representing the method that matches the specified requirements, if found; otherwise, null</returns>
        </member>
        <member name="M:Codeless.TypeHelper.IsOf``1(System.Type)">
            <summary>
            Determines if the specified type is equals to, or is a subclass of, or implemented the type <typeparamref name="T"/>.
            </summary>
            <typeparam name="T">Type to test.</typeparam>
            <param name="type">Type to test against.</param>
            <returns>*true* if the given type is equals to, or is a subclass of, or implemented the type <typeparamref name="T"/>.</returns>
        </member>
        <member name="M:Codeless.TypeHelper.IsOf(System.Type,System.Type)">
            <summary>
            Determines if the specified type is equals to, or is a subclass of, or implemented the other type.
            </summary>
            <param name="type">Type to test against.</param>
            <param name="other">Type to test.</param>
            <returns>*true* if the given type is equals to, or is a subclass of, or implemented the type supplied in <paramref name="other"/>.</returns>
        </member>
        <member name="M:Codeless.TypeHelper.IsOf(System.Type,System.Type,System.Type@)">
            <summary>
            Determines if the specified type is equals to, or is a subclass of, or implemented the other type, and returns the first generic type argument.
            </summary>
            <param name="type">Type to test against.</param>
            <param name="other">Type to test.</param>
            <param name="typeArgument">If the specified type is a generic type or interface, the first generic type argument of the generic type of interface is set to this variable; otherwise, *null* is set.</param>
            <returns>*true* if the given type is equals to, or is a subclass of, or implemented the type supplied in <paramref name="other"/>.</returns>
        </member>
        <member name="M:Codeless.TypeHelper.IsOf(System.Type,System.Type,System.Type[]@)">
            <summary>
            Determines if the specified type is equals to, or is a subclass of, or implemented the other type, and return the generic type arguments.
            </summary>
            <param name="type">Type to test against.</param>
            <param name="other">Type to test.</param>
            <param name="typeArguments">If the specified type is a generic type or interface, the generic type arguments of the generic type of interface is set to this variable as an array; otherwise, an empty array is set.</param>
            <returns>*true* if the given type is equals to, or is a subclass of, or implemented the type supplied in <paramref name="other"/>.</returns>
        </member>
        <member name="T:Codeless.ConcurrentFactory`2">
            <summary>
            Provides a thread-safe keyed collection that for any key, the singleton value factory delegate is executed exactly one only.
            </summary>
            <typeparam name="TKey">Type of keys.</typeparam>
            <typeparam name="TItem">Type of values.</typeparam>
        </member>
        <member name="M:Codeless.ConcurrentFactory`2.GetInstance(`0,System.Func{`0,`1})">
            <summary>
            Gets an instance of type <typeparamref name="TItem"/>.
            </summary>
            <param name="key">Key of an item.</param>
            <param name="valueFactory">A delegate that intakes a key and generate a value.</param>
            <returns>A singleton item corresponding to the specified key.</returns>
        </member>
        <member name="M:Codeless.ConcurrentFactory`2.GetInstance(`0,System.Func{`1})">
            <summary>
            Gets an instance of type <typeparamref name="TItem"/>.
            </summary>
            <param name="key">Key of an item.</param>
            <param name="valueFactory">A delegate that generate a value.</param>
            <returns>A singleton item corresponding to the specified key.</returns>
        </member>
        <member name="M:Codeless.ConcurrentFactory`2.Destroy(`0)">
            <summary>
            Removes a singleton value for a specified key.
            </summary>
            <param name="key">Key of an item.</param>
            <returns>A boolean indicating whether the removal executes successfully or not.</returns>
        </member>
        <member name="M:Codeless.ConcurrentFactory`2.Clear">
            <summary>
            Clears all entries in this collection.
            </summary>
        </member>
        <member name="M:Codeless.ConcurrentFactory`2.GetEnumerator">
            <summary>
            Gets an enumerator of each entry in this collection.
            </summary>
            <returns>An enumerator.</returns>
        </member>
        <member name="T:Codeless.Enum`1">
            <summary>
            Provides strongly-typed methods to any Enum type.
            </summary>
            <typeparam name="T">An enumeration type.</typeparam>
        </member>
        <member name="M:Codeless.Enum`1.Parse(System.String)">
            <summary>
            Converts the string representation of the name or numeric value of one or more
            enumerated constants to an equivalent enumerated object of type <typeparamref name="T"/>.
            </summary>
            <param name="value">A string containing the name or value to convert.</param>
            <returns>An object of type <typeparamref name="T"/> whose value is represented by value.</returns>
        </member>
        <member name="M:Codeless.Enum`1.Parse(System.String,System.Boolean)">
            <summary>
            Converts the string representation of the name or numeric value of one or more
            enumerated constants to an equivalent enumerated object of type <typeparamref name="T"/>. 
            A parameter specifies whether the operation is case-insensitive.
            </summary>
            <param name="value">A string containing the name or value to convert.</param>
            <param name="ignoreCase">true to ignore case; false to regard case.</param>
            <returns>An object of type <typeparamref name="T"/> whose value is represented by value.</returns>
        </member>
        <member name="M:Codeless.Enum`1.TryParse(System.String)">
            <summary>
            Converts the string representation of the name or numeric value of one or more
            enumerated constants to an equivalent enumerated object.
            </summary>
            <param name="value">The string representation of the enumeration name or underlying value to convert.</param>
            <returns>The enumeration type to which to convert value if the value parameter was converted successfully; otherwise null.</returns>
        </member>
        <member name="M:Codeless.Enum`1.TryParse(System.String,System.Boolean)">
            <summary>
            Converts the string representation of the name or numeric value of one or more
            enumerated constants to an equivalent enumerated object of type <typeparamref name="T"/>. 
            A parameter specifies whether the operation is case-insensitive.
            </summary>
            <param name="value">The string representation of the enumeration name or underlying value to convert.</param>
            <param name="ignoreCase">true to ignore case; false to regard case.</param>
            <returns>The enumeration type to which to convert value if the value parameter was converted successfully; otherwise null.</returns>
        </member>
        <member name="M:Codeless.Enum`1.TryParse(System.String,`0@)">
            <summary>
            Converts the string representation of the name or numeric value of one or more
            enumerated constants to an equivalent enumerated object. The return value indicates
            whether the conversion succeeded.
            </summary>
            <param name="value">The string representation of the enumeration name or underlying value to convert.</param>
            <param name="result">
            When this method returns, result contains an object of type TEnum whose value
            is represented by value if the parse operation succeeds. If the parse operation
            fails, result contains the default value of the underlying type of TEnum. Note
            that this value need not be a member of the TEnum enumeration. This parameter
            is passed uninitialized.
            </param>
            <returns>true if the value parameter was converted successfully; otherwise, false.</returns>
        </member>
        <member name="M:Codeless.Enum`1.TryParse(System.String,System.Boolean,`0@)">
            <summary>
            Converts the string representation of the name or numeric value of one or more
            enumerated constants to an equivalent enumerated object. A parameter specifies
            whether the operation is case-sensitive. The return value indicates whether the
            conversion succeeded.
            </summary>
            <param name="value">The string representation of the enumeration name or underlying value to convert.</param>
            <param name="ignoreCase">true to ignore case; false to consider case.</param>
            <param name="result">
            When this method returns, result contains an object of type TEnum whose value
            is represented by value if the parse operation succeeds. If the parse operation
            fails, result contains the default value of the underlying type of TEnum. Note
            that this value need not be a member of the TEnum enumeration. This parameter
            is passed uninitialized.
            </param>
            <returns>true if the value parameter was converted successfully; otherwise, false.</returns>
        </member>
        <member name="M:Codeless.Enum`1.GetValues">
            <summary>
            Gets all values of the Enum type <typeparamref name="T"/>.
            </summary>
            <returns>An enumerable object that enumerate all values defined in the Enum type.</returns>
        </member>
        <member name="M:Codeless.Enum`1.Format(System.Object,System.String)">
            <summary>
            See <see cref="M:System.Enum.Format(System.Type,System.Object,System.String)"/>.
            </summary>
            <param name="value"></param>
            <param name="format"></param>
            <returns></returns>
        </member>
        <member name="M:Codeless.Enum`1.GetName(System.Object)">
            <summary>
            See <see cref="M:System.Enum.GetName(System.Type,System.Object)"/>.
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Codeless.Enum`1.GetNames">
            <summary>
            See <see cref="M:System.Enum.GetNames(System.Type)"/>.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Codeless.Enum`1.GetUnderlyingType">
            <summary>
            See <see cref="M:System.Enum.GetUnderlyingType(System.Type)"/>.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Codeless.Enum`1.IsDefined(System.Object)">
            <summary>
            See <see cref="M:System.Enum.IsDefined(System.Type,System.Object)"/>.
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Codeless.Enum`1.ToObject(System.Object)">
            <summary>
            See <see cref="M:System.Enum.ToObject(System.Type,System.Object)"/>.
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Codeless.Enum`1.ToObject(System.Byte)">
            <summary>
            See <see cref="M:System.Enum.ToObject(System.Type,System.Byte)"/>.
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Codeless.Enum`1.ToObject(System.SByte)">
            <summary>
            See <see cref="M:System.Enum.ToObject(System.Type,System.SByte)"/>.
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Codeless.Enum`1.ToObject(System.Int32)">
            <summary>
            See <see cref="M:System.Enum.ToObject(System.Type,System.Int32)"/>.
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Codeless.Enum`1.ToObject(System.UInt32)">
            <summary>
            See <see cref="M:System.Enum.ToObject(System.Type,System.UInt32)"/>.
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Codeless.Enum`1.ToObject(System.Int64)">
            <summary>
            See <see cref="M:System.Enum.ToObject(System.Type,System.Int64)"/>.
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Codeless.Enum`1.ToObject(System.UInt64)">
            <summary>
            See <see cref="M:System.Enum.ToObject(System.Type,System.UInt64)"/>.
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Codeless.Enum`1.ToObject(System.Int16)">
            <summary>
            See <see cref="M:System.Enum.ToObject(System.Type,System.Int16)"/>.
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Codeless.Enum`1.ToObject(System.UInt16)">
            <summary>
            See <see cref="M:System.Enum.ToObject(System.Type,System.UInt16)"/>.
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="T:Codeless.ExceptionHelper">
            <summary>
            Provides extension methods to <see cref="T:System.Exception"/> objects.
            </summary>
        </member>
        <member name="M:Codeless.ExceptionHelper.Rethrow(System.Exception)">
            <summary>
            Rethrows an exception while maintaining the original stack trace.
            The method rethrows the exception on its own and does not actually return. 
            The returned value is to allow writing <code>throw ex.Rethrow()</code> to maintain certain compile-time checking.
            </summary>
            <param name="ex">Exception to be rethrown.</param>
            <returns>Supplied exception object.</returns>
        </member>
    </members>
</doc>
